-- TO CREATE TABLE
CREATE TABLE HWOOD (FIRST_NAME VARCHAR(20), LAST_NAME VARCHAR(20),COUNTRY_STATE VARCHAR(10),CITY VARCHAR(10))
CREATE TABLE BWOOD (FIRST_NAME VARCHAR(20), LAST_NAME VARCHAR(20),COUNTRY_STATE VARCHAR(10),CITY VARCHAR(10))

-- TO INSERT NEW ROW
INSERT INTO BWOOD(FIRST_NAME,LAST_NAME,COUNTRY_STATE,CITY)
VALUES('AJAY','DEVGAN','IND','MUMBAI' )
INSERT INTO BWOOD(FIRST_NAME,LAST_NAME,COUNTRY_STATE,CITY)
VALUES('SR','KHAN','IND','MUMBAI'),
       ('MANOJ','VAJPAYEE','IND','LUCKNOW'),
	   ('PARESH','RAWAL','IND','AHMEDABAD'),
	   ('RAJANI','KANT','IND','CHENNAI')
INSERT INTO HWOOD VALUES('JUSTIN','BIBER','USA','NYC',25),
       ('PAMLEA','ANDERSON','USA','NYC',60),
	   ('HARRY','POTER','UK','LONDON',18),
	   ('ANGELINA','JOLIE','USA','SF',45);
INSERT INTO BWOOD VALUES('NAWAZ','SIDDIQUI','IND','PATNA','23')
--INSERT INTO BWOOD VALUES ('NAWAZ','SIDDIQUI','IND','PATNA','50');

-- TO FILTER DATA
SELECT * FROM BWOOD;
SELECT DISTINCT CITY FROM BWOOD;
SELECT * FROM BWOOD WHERE CITY='MUMBAI';
SELECT * FROM BWOOD WHERE CITY='MUMBAI' AND LAST_NAME='KHAN';
SELECT * FROM BWOOD WHERE CITY='MUMBAI' OR CITY='CHENNAI';
SELECT * FROM BWOOD WHERE LAST_NAME LIKE '%AN';
SELECT * FROM BWOOD WHERE LAST_NAME LIKE '%A_';

--TO ARRANGE DATA
SELECT * FROM BWOOD ORDER BY FIRST_NAME DESC;
SELECT * FROM BWOOD ORDER BY LAST_NAME ASC;
SELECT CITY,SUM(AGE) TOTAL_AGE FROM BWOOD GROUP BY CITY;

-- TO UPDATE/ MODIFY EXISTING ROW
UPDATE BWOOD  SET FIRST_NAME='BHAVIN',LAST_NAME='SHAH',COUNTRY_STATE='INDIA',AGE=55,CITY='BANGALORE'WHERE FIRST_NAME='SR' AND LAST_NAME='KHAN';
UPDATE BWOOD SET AGE='65' WHERE FIRST_NAME='RAJANI';
UPDATE HWOOD SET FIRST_NAME='PAMELA'  WHERE AGE=50 ;

-- TO DELETE ROWS
DELETE FROM BWOOD WHERE AGE IN (55,60,50,60,70,50);
DELETE FROM BWOOD WHERE CITY='PATNA';

-- ?TO DELETE BY SURROGATE KEY

--MATHS FOR COLUMN
SELECT SUM(AGE) TOTAL_AGE FROM BWOOD;
SELECT MAX(AGE) MAX_AGE FROM BWOOD;
SELECT MIN(AGE) MIN_AGE FROM BWOOD;
SELECT AVG(AGE) AVG_AGE FROM BWOOD;

-- TO MODIFY TABLE
-- ADD COLUMN
ALTER TABLE BWOOD ADD AGE CHAR (3);
--DROP COLUMN
ALTER TABLE BWOOD DROP COLUMN AGE;
--CHNAGE COLUMN TYPE
ALTER TABLE BWOOD ADD AGE INT;
--? RENAME COLUMN

-- TO DELETE ALL ROWS
TRUNCATE TABLE HWOOD;

-- TO DELETE TABLE
DROP TABLE HWOOD;

-- ? TO RENAME COLUMN

-- TO FILTER DATE

-- MINUS ( NOT AVAILABE IN SQL SERVER)

--UNION
SELECT AGE FROM BWOOD
UNION
SELECT AGE FROM HWOOD;

--UNION ALL
SELECT AGE FROM BWOOD
UNION ALL
SELECT AGE FROM HWOOD;

--- INTERSECT
SELECT SR_NO FROM BWOOD
INTERSECT
SELECT SR_NO FROM HWOOD;

--- ALIAS
SELECT LAST_NAME AS TRIMED FROM HWOOD WHERE SR_NO=8;
SELECT LAST_NAME TRIMED FROM HWOOD WHERE SR_NO=8;

--- CASE
SELECT FIRST_NAME,LAST_NAME,
	CASE
	WHEN AGE=53 THEN 'HALF'
	WHEN AGE<53 THEN 'LESS THAN HALF'
	WHEN AGE>53 THEN 'MORE THAN HALF'
	END AS HALLLF,
	AGE 
	FROM BWOOD;

--- IN
SELECT * FROM BWOOD WHERE AGE IN (50,53);

---NOT IN
SELECT * FROM BWOOD WHERE AGE NOT IN (50,53);

---EXIST (SEE)


--- NOT EXIST (SEE)


--- BETWEEN
SELECT * FROM BWOOD WHERE AGE BETWEEN 50 AND 55;

-- NOT BETWEEN
SELECT * FROM BWOOD WHERE AGE NOT BETWEEN 50 AND 55;

-- HAVING
SELECT SUM(AGE) SARVADO ,CITY FROM BWOOD GROUP BY CITY HAVING SUM(AGE) >50;

-- string functions
-- CONACAT
SELECT CONCAT(FIRST_NAME,' ',LAST_NAME) FROM HWOOD
SELECT (FIRST_NAME+' '+LAST_NAME) FROM HWOOD
-- ADD SEPAROTOR BETWEEN ALL COLUMS
SELECT CONCAT_WS('*',FIRST_NAME,LAST_NAME,CITY) FROM HWOOD;

-- DATA LENGTH
SELECT DATALENGTH(FIRST_NAME) FROM HWOOD
--LENGTH (counts leading spaces, but not trailing spaces):
SELECT LEN(FIRST_NAME) FROM HWOOD

--difference (LESS IMP)
select DIFFERENCE(FIRST_NAME,LAST_NAME) FROM HWOOD

--TO MODIFY FORMAT
SELECT FORMAT(SR_NO,'5#') FROM HWOOD
SELECT FORMAT(AGE,'#-#') FROM HWOOD

-- TRIM
SELECT TRIM(FIRST_NAME) FROM HWOOD WHERE SR_NO=8;
SELECT TRIM(LAST_NAME) AS TRIMED FROM HWOOD WHERE SR_NO=8;

--LTRIM
SELECT LTRIM(FIRST_NAME) FROM HWOOD
--RTIRM
SELECT RTRIM(FIRST_NAME) FROM HWOOD

--- LEFT ( HERE ONLY 2 LETTERS FROM LEFT SIDE)
SELECT LEFT(FIRST_NAME,2) FROM BWOOD

---RIGHT ( ONLY 2 LETTERS FROM RIGHT SIDE)
SELECT RIGHT(FIRST_NAME,2) FROM BWOOD

--LOWER AND UPPER
SELECT LOWER(FIRST_NAME) FROM HWOOD
SELECT UPPER(FIRST_NAME) FROM HWOOD

--REPLACE(string, old_string, new_string)
SELECT REPLACE(FIRST_NAME,'A','B') FROM BWOOD

-- TO REPAET n TIMES (LESS IMP)
SELECT REPLICATE(FIRST_NAME,2) FROM BWOOD

-- TO REVERSE STRING
SELECT REVERSE(FIRST_NAME) FROM BWOOD

-- RETURN SUBSTRING
SELECT SUBSTRING(FIRST_NAME,2,5) FROM BWOOD

-- IS NULL
SELECT * FROM BWOOD WHERE AGE IS NULL;

--IS NOT NULL
SELECT * FROM BWOOD WHERE AGE IS NOT NULL;

-- COUNT(*)
SELECT COUNT(*) FROM BWOOD

--- COUNT
SELECT COUNT(AGE) FROM BWOOD

-- LOWER CASE AND UPPAER CASE
SELECT *,LOWER(FIRST_NAME) NANU FROM BWOOD
SELECT *,UPPER(FIRST_NAME) NANU FROM BWOOD

-- TOP
SELECT TOP 2 * FROM BWOOD;

-- JOIN
http://www.sqlservertutorial.net/sql-server-basics/sql-server-joins/

SELECT * FROM BWOOD A INNER JOIN HWOOD B ON A.SR_NO=B.SR_NO
SELECT * FROM BWOOD A FULL OUTER JOIN HWOOD B ON A.SR_NO=B.SR_NO
SELECT * FROM BWOOD A LEFT JOIN HWOOD B ON A.SR_NO=B.SR_NO
SELECT * FROM BWOOD A LEFT JOIN HWOOD B ON A.SR_NO=B.SR_NO WHERE B.SR_NO IS NULL
SELECT * FROM BWOOD A RIGHT JOIN HWOOD B ON A.SR_NO=B.SR_NO
SELECT * FROM BWOOD A RIGHT JOIN HWOOD B ON A.SR_NO=B.SR_NO WHERE A.SR_NO IS NULL
SELECT * FROM BWOOD A CROSS JOIN HWOOD B

--VIEW
---CREATE VIEW
CREATE VIEW BOLLY AS 
SELECT * 
FROM BWOOD 
WHERE SR_NO=1

--SEE VIEW
SELECT * FROM BOLLY;

--UPDATE VIEW (SEE)

-- DROP VIEW
DROP VIEW BOLLY

-- create STORED PROCEDURE
CREATE PROCEDURE akhil1
AS
SELECT * FROM BWOOD WHERE SR_NO=5;

--execute STORED PROCEDURE
EXEC akhil1

-- update STORED PROCEDURE
ALTER PROCEDURE AKHIL1 
AS 
BEGIN
SELECT * FROM BWOOD WHERE SR_NO=3
END

-- DELETE PROCEDURE
DROP PROCEDURE akhil1

-- begin end (see)

-- go (see practical)
-- The GO command is used to group SQL commands into batches which are sent to the server together
-- For example, you can't define a variable in one batch and then use it in another since the scope of the variable is limited to the batch in which it's defined.

-- commit rollback (see)

-- CONVERT DATA TYPE (see)



